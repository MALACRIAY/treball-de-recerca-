import cv2 
import numpy as np 
import json
import time

# Initialize the camera 
cap = cv2.VideoCapture(0) 
# Initialize the time tracking
last_update_time = time.time()
update_interval = 0.05  # Update every 0.05 seconds (50 milliseconds) to reduce update frequency

while True: 
    # Capture frame by frame 
    ret, frame = cap.read() 
    if not ret: 
        break 

    # Convert frame to HSV 
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV) 

    # Define lower and upper bounds for red color in HSV
    lower_red_1 = np.array([0, 100, 100])
    upper_red_1 = np.array([10, 255, 255])
    lower_red_2 = np.array([170, 100, 100])
    upper_red_2 = np.array([180, 255, 255])

    # Create masks for the red color
    mask1 = cv2.inRange(hsv, lower_red_1, upper_red_1)
    mask2 = cv2.inRange(hsv, lower_red_2, upper_red_2)
    mask = cv2.bitwise_or(mask1, mask2)

    # Find contours
    contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE) 

    if contours: 
        # Find the largest contour
        c = max(contours, key=cv2.contourArea) 

        # Get bounding box for the largest contour 
        x, y, w, h = cv2.boundingRect(c) 

        # Draw rectangle around the object
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2) 

        # Get the center of the object
        cx = frame.shape[1] - (x + w // 2) 
        cy = y + h // 2 

        # Print coordinates

        print(f"Coordinates: {cx}, {cy}")

        # Save the coordinates to a JSON file based on time interval
        current_time = time.time()
        if current_time - last_update_time >= update_interval:
            last_update_time = current_time
            # Write the coordinates as a string "x, y"
            coordinates_str = f"{cx}, {cy}"
            with open("coordinates.json", "w") as file:
                file.write(coordinates_str)

    # Show the frame
    cv2.imshow('Frame', frame) 
    if cv2.waitKey(1) & 0xFF == ord('q'): 
        break 

# Release the camera and close all OpenCV windows 
cap.release() 
cv2.destroyAllWindows() 